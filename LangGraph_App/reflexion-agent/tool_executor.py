from langchain_core.tools import StructuredTool
from langchain_tavily import TavilySearch
from langgraph.prebuilt import ToolNode
from dotenv import load_dotenv
from pathlib import Path
from typing import List


load_dotenv(dotenv_path=Path("../../.env"))

from schemas import AnswerQuestion, ReviseAnswer


tavily_tool = TavilySearch(max_results=5)

# wrap the tavily search (include **kwargs to accomodate
# extra argumens generated by llm
def run_queries(search_queries: List[str], **kwargs):
    """Run the generated queries."""
    return tavily_tool.batch([{"query": query} for query in search_queries])

# generate two search tools when first generate answers or revise answers
# toolnode exams the llm messages and if it finds a tool call, it will call tool
execute_tools = ToolNode(
    [
        # search tool used when the first time an answer is generated
        StructuredTool.from_function(run_queries, name=AnswerQuestion.__name__),

        # tool used to search when revising the answer
        StructuredTool.from_function(run_queries, name=ReviseAnswer.__name__),
    ]
)

